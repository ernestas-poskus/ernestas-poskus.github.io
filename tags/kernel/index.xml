<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on Ernestas Poškus technical blog</title>
    <link>http://out13.com/tags/kernel/</link>
    <description>Recent content in kernel on Ernestas Poškus technical blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 20:55:21 +0300</lastBuildDate>
    
	<atom:link href="http://out13.com/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IO with io_uring</title>
      <link>http://out13.com/paper/efficient-io-with-io-uring/</link>
      <pubDate>Tue, 09 Jun 2020 20:55:21 +0300</pubDate>
      
      <guid>http://out13.com/paper/efficient-io-with-io-uring/</guid>
      <description>IO history There are many ways to do file based IO in Linux. The oldest and most basic are the read(2) and write(2) system calls. These were later augmented with pread(2) and pwrite(2) versions which allow passing in of an offset, and later still we got preadv(2) and pwritev(2) which are vector-based versions of the former. Because that still wasn&amp;rsquo;t quite enough, Linux also has preadv2(2) and pwritev2(2) system calls, which further extend the API to allow modifier flags.</description>
    </item>
    
    <item>
      <title>Attacking Branch Predictors to Bypass ASLR</title>
      <link>http://out13.com/paper/jump-over-aslr-attacking-branch-predictors-to-bypass-aslr/</link>
      <pubDate>Thu, 14 Sep 2017 19:48:19 +0300</pubDate>
      
      <guid>http://out13.com/paper/jump-over-aslr-attacking-branch-predictors-to-bypass-aslr/</guid>
      <description>Address Space Layout Randomization ASLR is widely used technique that protects systems against range of attacks.
ASLR works by randomizing the offset of key program segments in virtual memory, making it difficult for an attacker to derive the addresses of specific code objects and consequently redirect the control flow to this code.
Purpose of ASLR is to make it difficult, if not impossible, for the attacker to know the location of specific code pages in program address space.</description>
    </item>
    
  </channel>
</rss>