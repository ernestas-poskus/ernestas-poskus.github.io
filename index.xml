<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ernestas Poškus.io</title>
    <link>http://out13.com/</link>
    <description>Recent content on Ernestas Poškus.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 18:50:13 +0200</lastBuildDate>
    
	<atom:link href="http://out13.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Vue.js dynamic &lt;head&gt; meta tags</title>
      <link>http://out13.com/dev/vue-seo/</link>
      <pubDate>Wed, 20 Dec 2017 18:50:13 +0200</pubDate>
      
      <guid>http://out13.com/dev/vue-seo/</guid>
      <description>Testing Vue.js dynamic  meta tags indexability by major search engines.
When Vue app is loaded:
 meta title should change to: It will be a pleasure | Testing Vue.js dynamic  meta tags - Ernestas Poškus.io meta description should change to: A description of the page      </description>
    </item>
    
    <item>
      <title>Elasticsearch more nodes with fewer servers</title>
      <link>http://out13.com/employer/elasticsearch-more-nodes-with-fewer-servers/</link>
      <pubDate>Wed, 15 Nov 2017 19:31:47 +0200</pubDate>
      
      <guid>http://out13.com/employer/elasticsearch-more-nodes-with-fewer-servers/</guid>
      <description>Using NUMA in Elasticsearch for more nodes with fewer servers.</description>
    </item>
    
    <item>
      <title>Sharding out Elasticsearch</title>
      <link>http://out13.com/employer/sharding-out-elasticsearch/</link>
      <pubDate>Wed, 15 Nov 2017 19:21:47 +0200</pubDate>
      
      <guid>http://out13.com/employer/sharding-out-elasticsearch/</guid>
      <description>Optimization of Elasticsearch by sharding out.</description>
    </item>
    
    <item>
      <title>Socket statistics</title>
      <link>http://out13.com/mnemonics/socket-statistics/</link>
      <pubDate>Tue, 14 Nov 2017 20:35:44 +0200</pubDate>
      
      <guid>http://out13.com/mnemonics/socket-statistics/</guid>
      <description>-n, &amp;ndash;numeric | Do now try to resolve service names.
-a, &amp;ndash;all | Display all sockets.
-e, &amp;ndash;extended | Show detailed socket information
-p, &amp;ndash;processes | Show process using socket.
-t, &amp;ndash;tcp | Display only TCP sockets.
-u, &amp;ndash;udp | Display only UDP sockets.
-l, &amp;ndash;listening | Display only listening sockets (these are omitted by default).
-4, &amp;ndash;ipv4 | Display only IP version 4 sockets (alias for -f inet).
-6, &amp;ndash;ipv6 | Display only IP version 6 sockets (alias for -f inet6).</description>
    </item>
    
    <item>
      <title>Overcoming catastrophic forgetting in neural networks</title>
      <link>http://out13.com/paper/overcoming-catastrophic-forgetting-in-neural-networks/</link>
      <pubDate>Sun, 12 Nov 2017 23:05:18 +0200</pubDate>
      
      <guid>http://out13.com/paper/overcoming-catastrophic-forgetting-in-neural-networks/</guid>
      <description>Catastrophic forgetting in neural networks The ability to learn tasks in a sequential fashion is crucial to the development of artificial intelligence. Neural networks are not, in general, capable of this and it has been widely thought that catastrophic forgetting is an inevitable feature of connectionist models.
It is possible to overcome this limitation.
Our approach remembers old tasks by selectively slowing down learning on the weights important for those tasks.</description>
    </item>
    
    <item>
      <title>Bitcoin a Peer to Peer Electronic Cash System</title>
      <link>http://out13.com/paper/bitcoin-a-peer-to-peer-electronic-cash-system/</link>
      <pubDate>Thu, 19 Oct 2017 20:23:22 +0300</pubDate>
      
      <guid>http://out13.com/paper/bitcoin-a-peer-to-peer-electronic-cash-system/</guid>
      <description>P2P Electronic Cash System A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution.
Prevent double-spending problem using a peer-to-peer network.
As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they&amp;rsquo;ll generate the longest chain and outpace attackers.
The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.</description>
    </item>
    
    <item>
      <title>Attacking Branch Predictors to Bypass ASLR</title>
      <link>http://out13.com/paper/jump-over-aslr-attacking-branch-predictors-to-bypass-aslr/</link>
      <pubDate>Thu, 14 Sep 2017 19:48:19 +0300</pubDate>
      
      <guid>http://out13.com/paper/jump-over-aslr-attacking-branch-predictors-to-bypass-aslr/</guid>
      <description>Address Space Layout Randomization ASLR is widely used technique that protects systems against range of attacks.
ASLR works by randomizing the offset of key program segments in virtual memory, making it difficult for an attacker to derive the addresses of specific code objects and consequently redirect the control flow to this code.
Purpose of ASLR is to make it difficult, if not impossible, for the attacker to know the location of specific code pages in program address space.</description>
    </item>
    
    <item>
      <title>Cooperative Task Management without Manual Stack Management</title>
      <link>http://out13.com/paper/cooperative-task-management-without-manual-stack-management/</link>
      <pubDate>Thu, 10 Aug 2017 21:48:19 +0300</pubDate>
      
      <guid>http://out13.com/paper/cooperative-task-management-without-manual-stack-management/</guid>
      <description>Or, Event-driven Programming is Not the Opposite of Threaded Programming Two programming styles as a conflation of two concepts: task management and stack management.
Those two concerns define a two-axis space in which &amp;lsquo;multithreaded&amp;rsquo; and &amp;lsquo;event-driven&amp;rsquo; programming are diagonally opposite; there is a third &amp;lsquo;sweet spot&amp;rsquo; in the space that combines the advantages of both programming styles.
Different task management approaches offer different granularities of atomicity on shared state. Conflict management considers how to convert available atomicity to a meaningful mechanism for avoiding resource conflicts.</description>
    </item>
    
    <item>
      <title>Analyzing the Security of Traffic Infrastructure</title>
      <link>http://out13.com/paper/green-lights-forever-analyzing-the-security-of-traffic-infrastructure/</link>
      <pubDate>Thu, 03 Aug 2017 19:10:33 +0300</pubDate>
      
      <guid>http://out13.com/paper/green-lights-forever-analyzing-the-security-of-traffic-infrastructure/</guid>
      <description>Green Lights Forever Safety critical nature of traffic infrastructure requires that it be secure against computer-based attacks.
Traffic signals were originally designed as standalone hardware, each running on fixed timing schedules, but have evolved into more complex, networked systems.
Traffic controllers now store multiple timing plans, integrate varied sensor data, and even communicate with other intersections in order to better coordinate traffic.
Wireless networking has helped to mitigate these costs, and many areas now use intelligent wireless traffic management systems.</description>
    </item>
    
    <item>
      <title>/proc/meminfo - memory usage statistics</title>
      <link>http://out13.com/tools/proc-meminfo/</link>
      <pubDate>Mon, 31 Jul 2017 19:25:47 +0300</pubDate>
      
      <guid>http://out13.com/tools/proc-meminfo/</guid>
      <description>Reports statistics about memory usage on the system. Useful for inspecting more granular memory usage.
 Sample output below.
 $ cat /proc/meminfo MemTotal: 12189912 kB MemFree: 231992 kB MemAvailable: 4174992 kB Buffers: 430884 kB Cached: 4515856 kB SwapCached: 60 kB Active: 8019760 kB Inactive: 3120804 kB Active(anon): 6121448 kB Inactive(anon): 1099620 kB Active(file): 1898312 kB Inactive(file): 2021184 kB Unevictable: 3088 kB Mlocked: 3088 kB SwapTotal: 12467708 kB SwapFree: 12467352 kB Dirty: 1568 kB Writeback: 0 kB AnonPages: 6196916 kB Mapped: 1339276 kB Shmem: 1027248 kB Slab: 584576 kB SReclaimable: 349700 kB SUnreclaim: 234876 kB KernelStack: 20800 kB PageTables: 93864 kB NFS_Unstable: 0 kB Bounce: 0 kB WritebackTmp: 0 kB CommitLimit: 18562664 kB Committed_AS: 19186116 kB VmallocTotal: 34359738367 kB VmallocUsed: 0 kB VmallocChunk: 0 kB HardwareCorrupted: 0 kB AnonHugePages: 1019904 kB CmaTotal: 0 kB CmaFree: 0 kB HugePages_Total: 0 HugePages_Free: 0 HugePages_Rsvd: 0 HugePages_Surp: 0 Hugepagesize: 2048 kB DirectMap4k: 386324 kB DirectMap2M: 12083200 kB DirectMap1G: 0 kB  Interpreting each one  MemTotal: 12189912 kB</description>
    </item>
    
    <item>
      <title>Scaling Memcache at Facebook</title>
      <link>http://out13.com/paper/scaling-memcache-at-facebook/</link>
      <pubDate>Thu, 27 Jul 2017 19:47:58 +0300</pubDate>
      
      <guid>http://out13.com/paper/scaling-memcache-at-facebook/</guid>
      <description>Memcache at Facebook Largest memcached installation in the world, processing over a billion requests per second and storing trillions of items.
Items are distributed across the memcached servers through consistent hashing.
all web servers communicate with every memcached server in a short period of time. This all-to-all communication pattern can cause incast congestion or allow a single server to become the bottleneck for many web servers. Reduce latency mainly by focusing on the memcache client, which runs on each web server.</description>
    </item>
    
    <item>
      <title>Maglev: A Fast and Reliable Software Network Load Balancer</title>
      <link>http://out13.com/paper/maglev-a-fast-and-reliable-software-network-load-balancer/</link>
      <pubDate>Thu, 29 Jun 2017 18:11:57 +0300</pubDate>
      
      <guid>http://out13.com/paper/maglev-a-fast-and-reliable-software-network-load-balancer/</guid>
      <description>Maglev - fast and reliable network balancer Packets are distributed through ECMP.
Serves traffic for Google services &amp;amp; GCP.
Every Google service has 1 or more VIP&amp;rsquo;s.
Maglev associates each VIP with a set of service endpoints and announces it to the router over BGP. The router, in turn, announces the VIP to Google backbone.
Router receives a VIP packet it forwards the packet to 1 of Maglev machines in the cluster through ECMP since all Maglev machines announce the VIP with the same cost.</description>
    </item>
    
    <item>
      <title>slabtop - kernel slab cache information in real time</title>
      <link>http://out13.com/tools/slabtop-kernel-slab-cache-information-in-real-time/</link>
      <pubDate>Wed, 28 Jun 2017 18:57:58 +0300</pubDate>
      
      <guid>http://out13.com/tools/slabtop-kernel-slab-cache-information-in-real-time/</guid>
      <description>Displays detailed kernel slab cache information by aggregating /proc/slabinfo.
Tool shows a glimpse into kernel data structures.
 Sample output below.
 root@ow:~# slabtop -osc | head -n 20 Active / Total Objects (% used) : 4649227 / 4694474 (99.0%) Active / Total Slabs (% used) : 153429 / 153429 (100.0%) Active / Total Caches (% used) : 82 / 118 (69.5%) Active / Total Size (% used) : 1259115.61K / 1273939.</description>
    </item>
    
    <item>
      <title>Spanner: Google’s Globally-Distributed Database</title>
      <link>http://out13.com/paper/spanner-google-globally-distributed-database/</link>
      <pubDate>Thu, 25 May 2017 19:53:19 +0300</pubDate>
      
      <guid>http://out13.com/paper/spanner-google-globally-distributed-database/</guid>
      <description>Spanner Spanner is a scalable, globally-distributed database designed, built, and deployed at Google.
At the highest level of abstraction, it is a database that shards data across many sets of Paxos state machines.
Replication is used for global availability and geographic locality.
Spanner is designed to scale up to millions of machines across hundreds of datacenters and trillions of database rows.
Data is stored in schematized semi-relational tables; data is versioned, and each version is automatically timestamped with its commit time; old versions of data are subject to configurable garbage-collection policies; and applications can read data at old timestamps.</description>
    </item>
    
    <item>
      <title>In Search of an Understandable Consensus Algorithm</title>
      <link>http://out13.com/paper/in-search-of-an-understandable-consensus-algorithm/</link>
      <pubDate>Thu, 20 Apr 2017 19:13:57 +0300</pubDate>
      
      <guid>http://out13.com/paper/in-search-of-an-understandable-consensus-algorithm/</guid>
      <description>Raft Consensus algorithm for managing a replicated log.
Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered.
Paxos first defines a protocol capable of reaching agreement on a single decision, such as a single replicated log entry.
Raft implements consensus by first electing a distinguished leader, then giving the leader complete responsibility for managing the replicated log.</description>
    </item>
    
    <item>
      <title>LIRS: An Efficient Low Inter-reference Recency Set Replacement Policy to Improve Buffer Cache Performance</title>
      <link>http://out13.com/paper/lirs-efficient-low-inter-reference-recency-set-replacement-policy-to-improve-buffer-cache-performance/</link>
      <pubDate>Thu, 09 Mar 2017 19:34:52 +0200</pubDate>
      
      <guid>http://out13.com/paper/lirs-efficient-low-inter-reference-recency-set-replacement-policy-to-improve-buffer-cache-performance/</guid>
      <description>LIRS LRU replacement policy has been commonly used in the buffer cache management, it is well known for its inability to cope with access patterns with weak locality.
LIRS effectively addresses the limits of LRU by using recency to evaluate Inter-Reference Recency (IRR) for making a replacement decision.
LRU inefficiency  Under the LRU policy, a burst of references to infrequently used blocks such as “sequential scans” through a large file, may cause replacement of commonly referenced blocks in the cache.</description>
    </item>
    
    <item>
      <title>Serving fresh assets using Nginx location rewrite</title>
      <link>http://out13.com/posts/serving-fresh-assets-using-nginx-rewrite/</link>
      <pubDate>Wed, 08 Mar 2017 08:44:03 +0200</pubDate>
      
      <guid>http://out13.com/posts/serving-fresh-assets-using-nginx-rewrite/</guid>
      <description>Recently I have stumbled upon a problem to serve fresh/new assets for user web application.
As Phil Karlton said:
 There are only two hard things in Computer Science: cache invalidation and naming things.
 Historically fresh assets problem was approached either by appending appending url query params (?v=20130102) or renaming/hashing asset file completely (/css/default-2j9alkjan2k2.css).
Former is most popular one but not elegant since it brings explicit dependency for backend application what fresh/new asset file to include thus requires exact name file to be present on web server.</description>
    </item>
    
    <item>
      <title>Large-scale cluster management at Google with Borg</title>
      <link>http://out13.com/paper/large-scale-cluster-management-at-google-with-borg/</link>
      <pubDate>Thu, 09 Feb 2017 20:27:52 +0200</pubDate>
      
      <guid>http://out13.com/paper/large-scale-cluster-management-at-google-with-borg/</guid>
      <description>Borg Cluster manager that runs hundreds of thousands of jobs, from many thousands of different applications, across a number of clusters each with up to tens of thousands of machines.
3 main benefits:
 hides the details of resource management and failure handling so its users can focus on application development instead operates with very high reliability and availability, and supports applications that do the same lets us run workloads across tens of thousands of machines effectively  A key design feature in Borg is that already-running tasks continue to run even if the Borgmaster or a task’s Borglet goes down.</description>
    </item>
    
    <item>
      <title>Aerospike: Architecture of a Real-Time Operational DBMS</title>
      <link>http://out13.com/paper/aerospike-architecture-of-a-real-time-operational-dbms/</link>
      <pubDate>Sun, 29 Jan 2017 13:47:18 +0200</pubDate>
      
      <guid>http://out13.com/paper/aerospike-architecture-of-a-real-time-operational-dbms/</guid>
      <description>Aerospike architecture Modeled on the classic shared-nothing database architecture
Objectives of the cluster management subsystem:
 Arrive at a single consistent view of current cluster members across all nodes in the cluster. Automatically detect new node arrival/departure and seamless cluster reconfiguration. Detect network faults and be resilient to such network flakiness. Minimize time to detect and adapt to cluster membership changes.  Discovery Node arrival or departure is detected via heartbeat messages exchanged periodically between nodes.</description>
    </item>
    
    <item>
      <title>Approximating Data with the Count-Min Data Structure</title>
      <link>http://out13.com/paper/approximating-data-with-the-count-min-data-structure/</link>
      <pubDate>Thu, 29 Dec 2016 20:25:26 +0200</pubDate>
      
      <guid>http://out13.com/paper/approximating-data-with-the-count-min-data-structure/</guid>
      <description>Count-Min Data Structure Algorithmic problems such as tracking the contents of a set arise frequently in the course of building systems. Given the variety of possible solutions, the choice of appropriate data structures for such tasks is at the heart of building efficient and effective software.
The Count-Min sketch provides a different kind of solution to count tracking. It allocates a fixed amount of space to store count information, which does not vary over time even as more and more counts are updated.</description>
    </item>
    
    <item>
      <title>TAO: Facebook’s Distributed Data Store for the Social Graph</title>
      <link>http://out13.com/paper/tao-facebooks-distributed-data-store-for-the-social-graph/</link>
      <pubDate>Thu, 15 Dec 2016 19:36:32 +0200</pubDate>
      
      <guid>http://out13.com/paper/tao-facebooks-distributed-data-store-for-the-social-graph/</guid>
      <description>Distributed data store for social graph TAO is geographically distributed data store that provides efficient and timely access to the social graph using a fixed set of queries. Read optimized, persisted in MySQL.
Inefficient edge lists: A key-value cache is not a good semantic fit for lists of edges; queries must always fetch the entire edge list and changes to a single edge require the entire list to be reloaded.</description>
    </item>
    
    <item>
      <title>Efficient Reconciliation and Flow Control for Anti-Entropy Protocols</title>
      <link>http://out13.com/paper/efficient-reconciliation-and-flow-control-for-anti-entropy-protocols/</link>
      <pubDate>Thu, 01 Dec 2016 16:05:39 +0200</pubDate>
      
      <guid>http://out13.com/paper/efficient-reconciliation-and-flow-control-for-anti-entropy-protocols/</guid>
      <description>Flow Gossip Anti-entropy, or gossip, is an attractive way of replicating state that does not have strong consistency requirements. With few limitations, updates spread in expected time that grows logarithmic in the number of participating hosts, even in the face of host failures and message loss. The behavior of update propagation is easily modeled with well-known epidemic analysis techniques.
Gossip basics There are two classes of gossip: anti-entropy and rumor mongering protocols.</description>
    </item>
    
    <item>
      <title>SEDA: An Architecture for Well-Conditioned, Scalable Internet Services</title>
      <link>http://out13.com/paper/seda-an-architecture-for-well-conditioned-scalable-internet-services/</link>
      <pubDate>Thu, 24 Nov 2016 19:50:13 +0200</pubDate>
      
      <guid>http://out13.com/paper/seda-an-architecture-for-well-conditioned-scalable-internet-services/</guid>
      <description>SEDA - staged event driven architecture A SEDA is intended to support massive concurrency demands and simplify the construction of well-conditioned services. In SEDA, applications consist of a network of event-driven stages connected by explicit queues. This architecture allows services to be well-conditioned to load, preventing resources from being overcommitted when demand exceeds service capacity.
SEDA combines aspects of threads and event-based programming models to manage the concurrency, I/O, scheduling, and resource management needs of Internet services.</description>
    </item>
    
    <item>
      <title>The Interaction of Buffer Size and TCP Protocol Handling and its Impact</title>
      <link>http://out13.com/paper/the-interaction-of-buffer-size-and-tcp-protocol-handling/</link>
      <pubDate>Thu, 17 Nov 2016 19:23:07 +0200</pubDate>
      
      <guid>http://out13.com/paper/the-interaction-of-buffer-size-and-tcp-protocol-handling/</guid>
      <description>Abstract Miercom was engaged by Cisco Systems to conduct independent testing of two vendors’ top of the line, data-center switch-routers, including the Cisco Nexus 92160YC-X and Nexus 9272Q switches and the Arista 7280SE-72 switch.
TCP Congestion Control versus System Buffer Management TCP congestion control. The Transmission Control Protocol (TCP) is the Layer-4 control protocol (atop IP at Layer 3) that ensures a block of data that’s sent is received intact.</description>
    </item>
    
    <item>
      <title>Replication Under Scalable Hashing: A Family of Algorithms for Scalable Decentralized Data Distribution</title>
      <link>http://out13.com/paper/replication-under-scalable-hashing--a-family-of-algorithms-for-scalable-decentralized-data-distribution/</link>
      <pubDate>Thu, 10 Nov 2016 22:27:23 +0200</pubDate>
      
      <guid>http://out13.com/paper/replication-under-scalable-hashing--a-family-of-algorithms-for-scalable-decentralized-data-distribution/</guid>
      <description>Replication Under Scalable Hashing Typical algorithms for decentralized data distribution work best in a system that is fully built before it first used; adding or removing components results in either extensive reorganization of data or load imbalance in the system.
RUSH variants also support weighting, allowing disks of different vintages to be added to a system.
RUSH variants is optimal or near-optimal reorganization. When new disks are added to the system, or old disks are retired, RUSH variants minimize the number of objects that need to be moved in order to bring the system back into balance.</description>
    </item>
    
    <item>
      <title>Dynamo: Amazon’s Highly Available Key-value Store</title>
      <link>http://out13.com/paper/dynamo-amazon-highly-available-key-value-store/</link>
      <pubDate>Sun, 06 Nov 2016 12:32:44 +0200</pubDate>
      
      <guid>http://out13.com/paper/dynamo-amazon-highly-available-key-value-store/</guid>
      <description>Dynamo Dynamo sacrifices Consistency for Availability under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.
Gossip based distributed failure detection and membership protocol.
Query Model Read &amp;amp; Write operations to data item that is uniquely identified by a key. State is stored as blobs. Targets application that store objects up to 1MB.</description>
    </item>
    
    <item>
      <title>Bigtable: A Distributed Storage System for Structured Data</title>
      <link>http://out13.com/paper/bigtable-a-distributed-storage-system-for-structured-data/</link>
      <pubDate>Thu, 03 Nov 2016 19:54:45 +0200</pubDate>
      
      <guid>http://out13.com/paper/bigtable-a-distributed-storage-system-for-structured-data/</guid>
      <description>Bigtable Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers.
Bigtable does not support a full relational data model; instead, it provides clients with a simple data model that supports dynamic control over data layout and format, and allows clients to reason about the locality properties of the data represented in the underlying storage.</description>
    </item>
    
    <item>
      <title>Generating configuration from Ansible variables</title>
      <link>http://out13.com/posts/generating-configuration-from-ansible-variables/</link>
      <pubDate>Thu, 03 Nov 2016 08:48:29 +0200</pubDate>
      
      <guid>http://out13.com/posts/generating-configuration-from-ansible-variables/</guid>
      <description>If you have ever tried to render Ansible multi hash or list variable you probably something alike.
global: scrape_interval: &amp;quot;{{ prometheus_config_global_scrape_interval | to_nice_yaml }}&amp;quot; evaluation_interval: &amp;quot;{{ prometheus_config_global_evaluation_interval | to_nice_yaml }}&amp;quot; scrape_timeout: &amp;quot;{{ prometheus_config_global_scrape_timeout | to_nice_yaml }}&amp;quot; external_labels: &amp;quot;{{ prometheus_config_global_external_labels | to_nice_yaml }}&amp;quot;  This generates invalid and ugly YAML.
global: scrape_interval: &amp;quot;15s ... &amp;quot; evaluation_interval: &amp;quot;30s ... &amp;quot; scrape_timeout: &amp;quot;10s ... &amp;quot; external_labels: &amp;quot;null ... &amp;quot;  TLDR If you are persistent thus configuration maniac you probably found a way either by destructuring hash or made extra redundant variables around complex one.</description>
    </item>
    
    <item>
      <title>Testing Ansible on multiple platforms</title>
      <link>http://out13.com/posts/ansible-testing-multiple-platforms/</link>
      <pubDate>Sun, 25 Sep 2016 19:12:59 +0300</pubDate>
      
      <guid>http://out13.com/posts/ansible-testing-multiple-platforms/</guid>
      <description>It is very uncommon to find tests on Ansible playbooks. However when they exist it means playbook was created with care.
When playbook is created with Ansible command ansible-galaxy init myplaybook it creates number of directories and files, includes basic Travis CI .travis.yml file.
script: # Basic role syntax check - ansible-playbook tests/test.yml -i tests/inventory --syntax-check  Basic Travis script brings standard virtual environment operating system which is Ubuntu 12.</description>
    </item>
    
    <item>
      <title>Ownership is theft experiences building an embedded os in rust</title>
      <link>http://out13.com/paper/ownership-is-theft-experiences-building-an-embedded-os-in-rust/</link>
      <pubDate>Thu, 25 Aug 2016 20:39:03 +0300</pubDate>
      
      <guid>http://out13.com/paper/ownership-is-theft-experiences-building-an-embedded-os-in-rust/</guid>
      <description>Embedded OS in Rust Embedded systems:
 lack hardware protection mechanism less tolerant to crashes no easy way for debugging GC introduces non-deterministic delay  Rust Rust, a new systems programming language, provides compile-time memory safety checks to help eliminate runtime bugs that manifest from improper memory management.
Rust’s ownership model prevents otherwise safe resource sharing common in the embedded domain, conflicts with the reality of hardware resources, and hinders using closures for programming asynchronously.</description>
    </item>
    
    <item>
      <title>On the fly garbage collection</title>
      <link>http://out13.com/paper/on-the-fly-garbage-collection/</link>
      <pubDate>Thu, 25 Aug 2016 19:13:56 +0300</pubDate>
      
      <guid>http://out13.com/paper/on-the-fly-garbage-collection/</guid>
      <description>In our abstract form of the problem, we consider a directed graph of varying structure but with a fixed number of nodes, in which each node has at most two outgoing edges. More precisely, each node may have a left-hand outgoing edge and may have a right-hand outgoing edge, but either of them or both may be missing. In this graph a fixed set of nodes exists, called &amp;ldquo;the roots.</description>
    </item>
    
    <item>
      <title>Queues Are Databases</title>
      <link>http://out13.com/paper/queues-are-databases/</link>
      <pubDate>Fri, 12 Aug 2016 16:57:55 +0300</pubDate>
      
      <guid>http://out13.com/paper/queues-are-databases/</guid>
      <description>Queued transaction processing over pure client-server transaction processing. Queued systems are build on top of direct systems.
TP systems offer both queued and direct transaction processing. They offer both client-server and P2P direct processing.
Queue manager is best built as a naive resource manager atop an object-relational database system. That system must have good concurrency control, recovery, triggers, security, operations interfaces, and utilities.
Queues pose difficult problems when implemented atop a database:</description>
    </item>
    
    <item>
      <title>An Argument for Increasing TCP’s Initial Congestion Window</title>
      <link>http://out13.com/paper/an-argument-for-increasing-tcp-initial-congestion-window/</link>
      <pubDate>Thu, 04 Aug 2016 22:02:54 +0300</pubDate>
      
      <guid>http://out13.com/paper/an-argument-for-increasing-tcp-initial-congestion-window/</guid>
      <description>TCP congestion window  TCP flows start with initial congestion window of 4 segments (4KB of data).
 Window if critical for how quickly flows can finish.
Increase in 15KB congestion window improves average HTTP latency by 10%, mostly benefits RTT and BDP.
Slow start increases congestion window by the number of data segments acknowledged for each received ACK.
TCP latency is dominated by the number of round-trip times in slow-start phase.</description>
    </item>
    
    <item>
      <title>Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center</title>
      <link>http://out13.com/paper/mesos-platform-for-resource-sharing/</link>
      <pubDate>Thu, 28 Apr 2016 19:50:29 +0300</pubDate>
      
      <guid>http://out13.com/paper/mesos-platform-for-resource-sharing/</guid>
      <description>Platform for resource sharing  Sharing improves cluster utilization and avoids per-framework data repli-cation Organizations will want to run multiple frameworks in the same cluster, picking the best one for each application. Sharing a cluster between frameworks improves utilization and allows applications to share access to large datasets that may be too costly to replicate
 Architecture Mesos decides how many resources to offer each framework, based on an organizational policy such as fair sharing, while frameworks decide which resources to accept and which tasks to run on them.</description>
    </item>
    
    <item>
      <title>Tiny LFU highly efficient cache admission policy</title>
      <link>http://out13.com/paper/tiny-lfu-highly-efficient-cache-admission-policy/</link>
      <pubDate>Fri, 22 Apr 2016 21:26:15 +0300</pubDate>
      
      <guid>http://out13.com/paper/tiny-lfu-highly-efficient-cache-admission-policy/</guid>
      <description>Frequency based cache admission policy  Approximate LFU structure called TinyLFU, which maintains an approximate representation of the access frequency of a large sample of recently accessed items.
 TinyLFU is very compact and light-weight as it builds upon Bloom filter theory.
Usage The intuitive reason why caching works is that data accesses in many domains of computer science exhibit a considerable degree of “locality”.
When a data item is accessed, if it already appears in the cache, we say that there is a cache hit; otherwise, it is a cache miss.</description>
    </item>
    
    <item>
      <title>Container based operating system virtualization</title>
      <link>http://out13.com/paper/container-based-operating-system-virtualization/</link>
      <pubDate>Tue, 19 Apr 2016 19:30:48 +0300</pubDate>
      
      <guid>http://out13.com/paper/container-based-operating-system-virtualization/</guid>
      <description>Alternative to hypervisors.  Workload requirements for a given system will direct users to the point in the design space that requires the least trade-off.
 Sharing over isolation? Hypervisors often deployed to let a single machine host multiple, unrelated applications, which may run on behalf of independent organizations, as is common when a data center consolidates multiple physical servers. Hypervisors favor full isolation over sharing. However, when each virtual machine is running the same kernel and similar operating system distributions, the degree of isolation offered by hypervisors comes at the cost of efficiency relative to running all applications on a single kernel.</description>
    </item>
    
    <item>
      <title>Golang dynamic struct decoration</title>
      <link>http://out13.com/posts/golang-dynamic-struct-decoration/</link>
      <pubDate>Thu, 28 Jan 2016 20:42:45 +0200</pubDate>
      
      <guid>http://out13.com/posts/golang-dynamic-struct-decoration/</guid>
      <description>Dynamic struct decoration using type assertion.  Use cases: API / templates.
 Having simple map of:
input := map[string]interface{}{ &amp;quot;Key1&amp;quot;: []string{&amp;quot;some&amp;quot;, &amp;quot;key&amp;quot;}, &amp;quot;key3&amp;quot;: nil, &amp;quot;val&amp;quot;: 2, &amp;quot;val2&amp;quot;: &amp;quot;str&amp;quot;, &amp;quot;val3&amp;quot;: 4, }  One can decorate it using type assertion by iterating over it.
for key, value := range input { slice, ok := value.([]string) if ok { input[&amp;quot;Count&amp;quot;+key] = len(slice) } }  This becomes very useful when serializing struct into json.</description>
    </item>
    
    <item>
      <title>Setup Rust Racer with multiple Rust versions</title>
      <link>http://out13.com/posts/racer-with-multiple-rust-versions/</link>
      <pubDate>Tue, 15 Sep 2015 20:43:24 +0300</pubDate>
      
      <guid>http://out13.com/posts/racer-with-multiple-rust-versions/</guid>
      <description>Guide to setup Rust Racer [code completion utility] with multiple/nightly Rust versions. This will let you navigate &amp;amp; jump to definition between Rust versions.
1) Install Rust version manager  https://github.com/sdepold/rsvm#installation
 2) Install desired Rust version  rsvm install 0.12.0
 3) Switch/use desired Rust version  rsvm use 0.12.0
 4) rsvm - makes symbolic link to current rust version in  ls -la $HOME/.rsvm/current
total 56K drwxrwxr-x 2 user user 4.</description>
    </item>
    
    <item>
      <title>Readability tests</title>
      <link>http://out13.com/posts/readability-tests/</link>
      <pubDate>Sat, 04 Apr 2015 15:13:11 +0300</pubDate>
      
      <guid>http://out13.com/posts/readability-tests/</guid>
      <description>Flesch–Kincaid readability tests. Are readability tests designed to indicate how difficult a reading passage in English is to understand. There are two tests, the Flesch Reading Ease, and the Flesch–Kincaid Grade Level. [WIKI]
Due to own usage reasons I have decided to implement these readability tests in favourite language. Algorithm is quite simple I will focus on Flesch Reading ease.
 Flesch Reading Ease test
    Score Notes     90.</description>
    </item>
    
    <item>
      <title>Programming languages in bytes</title>
      <link>http://out13.com/posts/programming-languages/</link>
      <pubDate>Sun, 29 Mar 2015 12:59:46 +0300</pubDate>
      
      <guid>http://out13.com/posts/programming-languages/</guid>
      <description>var pie = new d3pie(&#34;pieChart&#34;, { &#34;header&#34;: { &#34;subtitle&#34;: { &#34;color&#34;: &#34;#999999&#34;, &#34;text&#34;: &#34;Generated from github.com/ernestas-poskus&#34;, &#34;fontSize&#34;: 12, &#34;font&#34;: &#34;open sans&#34; }, &#34;titleSubtitlePadding&#34;: 9 }, &#34;footer&#34;: { &#34;color&#34;: &#34;#999999&#34;, &#34;fontSize&#34;: 10, &#34;font&#34;: &#34;open sans&#34;, &#34;location&#34;: &#34;bottom-left&#34; }, &#34;size&#34;: { &#34;canvasHeight&#34;: 400, &#34;canvasWidth&#34;: 490, &#34;pieInnerRadius&#34;: &#34;50%&#34;, &#34;pieOuterRadius&#34;: &#34;80%&#34; }, &#34;data&#34;: { &#34;sortOrder&#34;: &#34;value-desc&#34;, &#34;content&#34;: [{&#34;label&#34;: &#34;Haskell&#34;, &#34;value&#34;: 801, &#34;color&#34;: &#34;#29b544&#34;},{&#34;label&#34;: &#34;Lua&#34;, &#34;value&#34;: 1152, &#34;color&#34;: &#34;#fa1fa1&#34;},{&#34;label&#34;: &#34;Standard ML&#34;, &#34;</description>
    </item>
    
    <item>
      <title>CV</title>
      <link>http://out13.com/cv/</link>
      <pubDate>Fri, 27 Mar 2015 16:15:10 +0200</pubDate>
      
      <guid>http://out13.com/cv/</guid>
      <description>Pragmatic &amp;amp; Ambitious
 Keen interest in service oriented architecture, massive scalability, distributed systems, Search Engines.  A programming language that doesn&#39;t change the way you think about programming is not worth knowing. - Alan Perlis  Blog: http://out13.com
Goodreads: 42270834-ernestas-poskus
Twitter: @ernestas_poskus
Open Source  https://github.com/AnsibleShipyard release manager/contributor of major Ansible playbooks (Zookeeper, Mesos, Marathon, etc.) https://github.com/linkosmos author of 10+ Golang packages https://github.com/ernestas-poskus/ansible-prometheus Ansible playbook for installing Prometheus monitoring system https://github.</description>
    </item>
    
  </channel>
</rss>