<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ernestas Poškus</title>
    <link>http://out13.com/posts/</link>
    <description>Recent content in Posts on Ernestas Poškus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Mar 2017 08:44:03 +0200</lastBuildDate>
    
	<atom:link href="http://out13.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serving fresh assets using Nginx location rewrite</title>
      <link>http://out13.com/posts/serving-fresh-assets-using-nginx-rewrite/</link>
      <pubDate>Wed, 08 Mar 2017 08:44:03 +0200</pubDate>
      
      <guid>http://out13.com/posts/serving-fresh-assets-using-nginx-rewrite/</guid>
      <description>Recently I have stumbled upon a problem to serve fresh/new assets for user web application.
As Phil Karlton said:
 There are only two hard things in Computer Science: cache invalidation and naming things.
 Historically fresh assets problem was approached either by appending appending url query params (?v=20130102) or renaming/hashing asset file completely (/css/default-2j9alkjan2k2.css).
Former is most popular one but not elegant since it brings explicit dependency for backend application what fresh/new asset file to include thus requires exact name file to be present on web server.</description>
    </item>
    
    <item>
      <title>Generating configuration from Ansible variables</title>
      <link>http://out13.com/posts/generating-configuration-from-ansible-variables/</link>
      <pubDate>Thu, 03 Nov 2016 08:48:29 +0200</pubDate>
      
      <guid>http://out13.com/posts/generating-configuration-from-ansible-variables/</guid>
      <description>If you have ever tried to render Ansible multi hash or list variable you probably something alike.
global: scrape_interval: &amp;quot;{{ prometheus_config_global_scrape_interval | to_nice_yaml }}&amp;quot; evaluation_interval: &amp;quot;{{ prometheus_config_global_evaluation_interval | to_nice_yaml }}&amp;quot; scrape_timeout: &amp;quot;{{ prometheus_config_global_scrape_timeout | to_nice_yaml }}&amp;quot; external_labels: &amp;quot;{{ prometheus_config_global_external_labels | to_nice_yaml }}&amp;quot;  This generates invalid and ugly YAML.
global: scrape_interval: &amp;quot;15s ... &amp;quot; evaluation_interval: &amp;quot;30s ... &amp;quot; scrape_timeout: &amp;quot;10s ... &amp;quot; external_labels: &amp;quot;null ... &amp;quot;  TLDR If you are persistent thus configuration maniac you probably found a way either by destructuring hash or made extra redundant variables around complex one.</description>
    </item>
    
    <item>
      <title>Testing Ansible on multiple platforms</title>
      <link>http://out13.com/posts/ansible-testing-multiple-platforms/</link>
      <pubDate>Sun, 25 Sep 2016 19:12:59 +0300</pubDate>
      
      <guid>http://out13.com/posts/ansible-testing-multiple-platforms/</guid>
      <description>It is very uncommon to find tests on Ansible playbooks. However when they exist it means playbook was created with care.
When playbook is created with Ansible command ansible-galaxy init myplaybook it creates number of directories and files, includes basic Travis CI .travis.yml file.
script: # Basic role syntax check - ansible-playbook tests/test.yml -i tests/inventory --syntax-check  Basic Travis script brings standard virtual environment operating system which is Ubuntu 12.</description>
    </item>
    
    <item>
      <title>Golang dynamic struct decoration</title>
      <link>http://out13.com/posts/golang-dynamic-struct-decoration/</link>
      <pubDate>Thu, 28 Jan 2016 20:42:45 +0200</pubDate>
      
      <guid>http://out13.com/posts/golang-dynamic-struct-decoration/</guid>
      <description>Dynamic struct decoration using type assertion.  Use cases: API / templates.
 Having simple map of:
input := map[string]interface{}{ &amp;quot;Key1&amp;quot;: []string{&amp;quot;some&amp;quot;, &amp;quot;key&amp;quot;}, &amp;quot;key3&amp;quot;: nil, &amp;quot;val&amp;quot;: 2, &amp;quot;val2&amp;quot;: &amp;quot;str&amp;quot;, &amp;quot;val3&amp;quot;: 4, }  One can decorate it using type assertion by iterating over it.
for key, value := range input { slice, ok := value.([]string) if ok { input[&amp;quot;Count&amp;quot;+key] = len(slice) } }  This becomes very useful when serializing struct into json.</description>
    </item>
    
    <item>
      <title>Setup Rust Racer with multiple Rust versions</title>
      <link>http://out13.com/posts/racer-with-multiple-rust-versions/</link>
      <pubDate>Tue, 15 Sep 2015 20:43:24 +0300</pubDate>
      
      <guid>http://out13.com/posts/racer-with-multiple-rust-versions/</guid>
      <description>Guide to setup Rust Racer [code completion utility] with multiple/nightly Rust versions. This will let you navigate &amp;amp; jump to definition between Rust versions.
1) Install Rust version manager  https://github.com/sdepold/rsvm#installation
 2) Install desired Rust version  rsvm install 0.12.0
 3) Switch/use desired Rust version  rsvm use 0.12.0
 4) rsvm - makes symbolic link to current rust version in  ls -la $HOME/.rsvm/current
total 56K drwxrwxr-x 2 user user 4.</description>
    </item>
    
    <item>
      <title>Readability tests</title>
      <link>http://out13.com/posts/readability-tests/</link>
      <pubDate>Sat, 04 Apr 2015 15:13:11 +0300</pubDate>
      
      <guid>http://out13.com/posts/readability-tests/</guid>
      <description>Flesch–Kincaid readability tests. Are readability tests designed to indicate how difficult a reading passage in English is to understand. There are two tests, the Flesch Reading Ease, and the Flesch–Kincaid Grade Level. [WIKI]
Due to own usage reasons I have decided to implement these readability tests in favourite language. Algorithm is quite simple I will focus on Flesch Reading ease.
 Flesch Reading Ease test
    Score Notes     90.</description>
    </item>
    
    <item>
      <title>Programming languages in bytes</title>
      <link>http://out13.com/posts/programming-languages/</link>
      <pubDate>Sun, 29 Mar 2015 12:59:46 +0300</pubDate>
      
      <guid>http://out13.com/posts/programming-languages/</guid>
      <description>var pie = new d3pie(&#34;pieChart&#34;, { &#34;header&#34;: { &#34;subtitle&#34;: { &#34;color&#34;: &#34;#999999&#34;, &#34;text&#34;: &#34;Generated from github.com/ernestas-poskus&#34;, &#34;fontSize&#34;: 12, &#34;font&#34;: &#34;open sans&#34; }, &#34;titleSubtitlePadding&#34;: 9 }, &#34;footer&#34;: { &#34;color&#34;: &#34;#999999&#34;, &#34;fontSize&#34;: 10, &#34;font&#34;: &#34;open sans&#34;, &#34;location&#34;: &#34;bottom-left&#34; }, &#34;size&#34;: { &#34;canvasHeight&#34;: 400, &#34;canvasWidth&#34;: 490, &#34;pieInnerRadius&#34;: &#34;50%&#34;, &#34;pieOuterRadius&#34;: &#34;80%&#34; }, &#34;data&#34;: { &#34;sortOrder&#34;: &#34;value-desc&#34;, &#34;content&#34;: [{&#34;label&#34;: &#34;Haskell&#34;, &#34;value&#34;: 801, &#34;color&#34;: &#34;#29b544&#34;},{&#34;label&#34;: &#34;Lua&#34;, &#34;value&#34;: 1152, &#34;color&#34;: &#34;#fa1fa1&#34;},{&#34;label&#34;: &#34;Standard ML&#34;, &#34;</description>
    </item>
    
  </channel>
</rss>